{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1697271741798},{"_id":"source/_posts/hello-world.md","hash":"f212d288b5790d4b0c65c6c0efb845933d71bdca","modified":1698321083078},{"_id":"source/_posts/learnC.md","hash":"839ee47f7c350574c96babb472e8eb7bdb8a25be","modified":1698320953129},{"_id":"source/categories/index-1.md","hash":"f268ffa9f58f319ecb01ebb492c4ae15ddd2a45c","modified":1697273335403},{"_id":"source/categories/index.md","hash":"c8f4f6477fde137283809e32b604aadf41be5679","modified":1697273996808},{"_id":"source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1697271741790},{"_id":"source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1697271741804},{"_id":"source/_posts/learnC/使用头文件示意图.png","hash":"a7f20dc0de596e4d84f1bb6052780b454e350e61","modified":1697868329530},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1697264205832},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1697264205833},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1697264205833},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1697264205840},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1697264205841},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1697264205841},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1697264205842},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1697264205841},{"_id":"themes/next/_config.yml","hash":"6d1f4375ec450d392b7f5f429598ab4f62022160","modified":1698147934997},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1697264205852},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1697264205842},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1697264205834},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1697264205913},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1697264205835},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1697264205837},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1697264205837},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1697264205838},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1697264205838},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1697264205838},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1697264205839},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1697264205839},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1697264205840},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1697264205840},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1697264205843},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1697264205843},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1697264205844},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1697264205844},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1697264205844},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1697264205844},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1697264205844},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1697264205846},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1697264205846},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1697264205852},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1697264205853},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1697264205854},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1697264205854},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1697264205854},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1697264205855},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1697264205855},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1697264205855},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1697264205856},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1697264205856},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1697264205856},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1697264205857},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1697264205857},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1697264205857},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1697264205858},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1697264205858},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1697264205858},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1697264205858},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1697264205859},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1697264205859},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1697264205859},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1697264205859},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1697264205861},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1697264205910},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1697264205910},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1697264205912},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1697264205912},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1697264205912},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1697264205912},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1697264205921},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1697264205835},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1697264205836},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1697264205836},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1697264205837},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1697264205846},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1697264205847},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1697264205847},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1697264205847},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1697264205849},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1697264205849},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1697264205850},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1697264205850},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1697264205850},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1697264205851},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1697264205851},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1697264205851},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1697264205852},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1697264205883},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1697264205884},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1697264205884},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1697264205885},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1697264205885},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1697264205889},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1697264205891},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1697264205894},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1697264205895},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1697264205895},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1697264205896},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1697264205898},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1697264205898},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1697264205900},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1697264205904},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1697264205906},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1697264205906},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1697264205913},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1697264205918},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1697264205918},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1697264205920},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1697264205920},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1697264205920},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1697264205921},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1697264205921},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1697264205921},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1697264205921},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1697264205922},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1697264205922},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1697264205922},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1697264205924},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1697264205924},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1697264205924},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1697264205924},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1697264205925},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1697264205925},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1697264205925},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1697264205926},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1697264205951},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1697264205960},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1697264205961},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1697264205961},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1697264205962},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1697264205962},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1697264205962},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1697264205963},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1697264205963},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1697264205964},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1697264205964},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1697264205964},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1697264205965},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1697264205965},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1697264205965},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1697264205966},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1697264205966},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1697264205966},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1697264205967},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1697264205967},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1697264205969},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1697264205969},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1697264205885},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1697264205887},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1697264205888},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1697264205888},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1697264205888},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1697264205889},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1697264205889},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1697264205891},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1697264205892},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1697264205891},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1697264205892},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1697264205892},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1697264205892},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1697264205893},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1697264205893},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1697264205893},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1697264205894},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1697264205894},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1697264205896},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1697264205896},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1697264205896},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1697264205898},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1697264205898},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1697264205899},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1697264205899},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1697264205900},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1697264205900},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1697264205901},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1697264205901},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1697264205902},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1697264205902},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1697264205903},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1697264205902},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1697264205903},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1697264205903},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1697264205904},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1697264205904},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1697264205906},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1697264205906},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1697264205907},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1697264205907},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1697264205907},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1697264205909},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1697264205909},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1697264205909},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1697264205909},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1697264205910},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1697264205910},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1697264205914},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1697264205914},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1697264205914},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1697264205915},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1697264205915},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1697264205915},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1697264205917},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1697264205917},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1697264205917},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1697264205918},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1697264205918},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1697264205959},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1697264205959},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1697264205959},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1697264205960},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1697264205960},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1697264205968},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1697264205968},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1697264205973},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1697264205973},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1697264205927},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1697264205927},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1697264205927},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1697264205934},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1697264205940},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1697264205941},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1697264205944},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1697264205944},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1697264205945},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1697264205947},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1697264205947},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1697264205948},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1697264205948},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1697264205951},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1697264205952},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1697264205952},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1697264205953},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1697264205953},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1697264205953},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1697264205954},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1697264205954},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1697264205954},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1697264205955},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1697264205955},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1697264205956},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1697264205956},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1697264205956},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1697264205957},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1697264205957},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1697264205957},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1697264205958},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1697264205958},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1697264205970},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1697264205971},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1697264205929},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1697264205929},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1697264205929},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1697264205929},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1697264205929},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1697264205930},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1697264205930},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1697264205930},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1697264205931},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1697264205931},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1697264205931},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1697264205931},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1697264205932},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1697264205932},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1697264205932},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1697264205934},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1697264205934},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1697264205934},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1697264205935},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1697264205935},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1697264205935},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1697264205936},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1697264205936},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1697264205937},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1697264205937},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1697264205938},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1697264205938},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1697264205938},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1697264205938},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1697264205940},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1697264205940},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1697264205941},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1697264205941},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1697264205942},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1697264205942},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1697264205942},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1697264205942},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1697264205943},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1697264205943},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1697264205943},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1697264205944},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1697264205945},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1697264205945},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1697264205947},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1697264205947},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1697264205948},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1697264205948},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1697264205949},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1697264205949},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1697264205949},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1697264205949},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1697264205951},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1697264205971},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1697264205972},{"_id":"public/atom.xml","hash":"e77fb74ae24e616d66ba9528be9dd4439b57e6ff","modified":1705385565923},{"_id":"public/content.json","hash":"c653a56f609cb95e5ac5b3d65c2b7b86109f3588","modified":1705385565923},{"_id":"public/search.json","hash":"96419269719acfdafe8640c6c7ca99f401e03324","modified":1705384389890},{"_id":"public/sitemap.xml","hash":"5a2dac6db9e8d9dfe5ecf2ba768bf0321cde32f1","modified":1705374145382},{"_id":"public/sitemap.txt","hash":"ea9429d96ff1808890eb60db2dc3ea9c67ccbcdf","modified":1705374145382},{"_id":"public/categories/index-1.html","hash":"1824eec7159dee6b5ba525f3e4c433cc09146745","modified":1705385565923},{"_id":"public/categories/index.html","hash":"34c9307b55f9a39244aeb82fc39e61afcaee3a11","modified":1705385565923},{"_id":"public/about/index.html","hash":"89e4f4e512a1a7b266ee0be79dc7ad6184591702","modified":1705385565923},{"_id":"public/tags/index.html","hash":"d5271d8a99655b30b3a4c5e10248fc5aeea0756f","modified":1705385565923},{"_id":"public/categories/C语言/index.html","hash":"b08e47d5de3eb52d013b6deefbfc2df68ad2efae","modified":1698144674211},{"_id":"public/archives/index.html","hash":"848203e0db171b9227e095f1be232267ebd437bd","modified":1705385565923},{"_id":"public/archives/2023/index.html","hash":"d6c587af73e13efb5745b3e34dac25abc3511e1f","modified":1705318219980},{"_id":"public/archives/2023/10/index.html","hash":"e91a1cf57d04a96fcb46ac75d96690f5b6904d6f","modified":1705318219980},{"_id":"public/2023/10/21/learnC/index.html","hash":"1f29e0ec234de6d81d55ac81cfcb95901d691fc9","modified":1705318219980},{"_id":"public/2023/10/14/hello-world/index.html","hash":"5baab2ba7879985db8e8061ea994e0c2a3ef4260","modified":1705318219980},{"_id":"public/index.html","hash":"0a9c52faf0054cadff58f633bdabfda3b6b92529","modified":1705385565923},{"_id":"public/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1698144674211},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1698144674211},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1698144674211},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1698144674211},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1698144674211},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1698144674211},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1698144674211},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1698144674211},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1698144674211},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1698144674211},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1698144674211},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1698144674211},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1698144674211},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1698144674211},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1698144674211},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1698144674211},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1698144674211},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1698144674211},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1698144674211},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1698144674211},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1698144674211},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1698144674211},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1698144674211},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1698144674211},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1698144674211},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1698144674211},{"_id":"public/css/main.css","hash":"9a230f6b73e2aac2626f8472fe683391acf89c20","modified":1698144674211},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1698144674211},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1698144674211},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1698144674211},{"_id":"public/2023/10/21/learnC/使用头文件示意图.png","hash":"a7f20dc0de596e4d84f1bb6052780b454e350e61","modified":1705318219980},{"_id":"public/categories/编程语言/C语言/index.html","hash":"651d767c275d8140e7c6509898acd287009e0d7a","modified":1705318219980},{"_id":"public/categories/编程语言/index.html","hash":"48514046fa1f5e241be100384593ea2cd007e63c","modified":1705318219980},{"_id":"public/categories/编程语言/C语言/test/index.html","hash":"8556674e3747370813b39cf6f0d28edc212e6032","modified":1698146943673},{"_id":"public/default-index/index.html","hash":"7100a843d17b54fcd9d463afa761c277b6445a40","modified":1698147896479},{"_id":"source/_posts/RecycleView-ItemDecoration.md","hash":"494180b5f1d6b259ea230e44c99b1c08b615a5dc","modified":1698479256134},{"_id":"public/categories/Android/index.html","hash":"3633f808ceccbbb4b7968cb39b633e10b2e575fb","modified":1705318219980},{"_id":"public/categories/Android/控件/index.html","hash":"145db804595a2bbb35746431bf07fde82a1d5694","modified":1705318219980},{"_id":"public/categories/Android/控件/recyclerView/index.html","hash":"c9796dd48e5180c1992e80d0c81a0dd9feed6585","modified":1705318219980},{"_id":"public/2023/10/28/RecycleView-ItemDecoration/index.html","hash":"48c048b5487e58d60233fb01b0cc95aa26396f72","modified":1705318219980},{"_id":"source/_posts/java-thread-poll.md","hash":"34b307880866e95eaa215527c2a96a93a08aeb8a","modified":1705373587551},{"_id":"public/archives/2024/index.html","hash":"42f638e70fb442a28570a51f9168106aece9fd18","modified":1705385565923},{"_id":"public/archives/2024/01/index.html","hash":"c34ca17f4fbf1ee1ae5a4ae2e29e3d7c2ef2ab81","modified":1705385565923},{"_id":"public/2024/01/16/java-thread-poll/index.html","hash":"80b832ceb566b98f58c57affee776b30ac1da004","modified":1705373604917},{"_id":"source/_posts/java-threadpool.md","hash":"0e7d19254f559bcfcbace9581ee2734699f10515","modified":1705384379128},{"_id":"public/categories/Java/index.html","hash":"ada26ba5cb5d556c35606161cbaf0607c606c2e5","modified":1705385565923},{"_id":"public/2024/01/16/java-threadpool/index.html","hash":"785f935cf3daaceaac3f67d3b750c903aed786b3","modified":1705385565923}],"Category":[{"name":"C语言","_id":"clo47hszm0005h49ufwry8k3z"},{"name":"编程语言","_id":"clo485ycc0000e49u30hq9bo3"},{"name":"C语言","parent":"clo485ycc0000e49u30hq9bo3","_id":"clo485yce0001e49u07ci5f8p"},{"name":"test","parent":"clo485yce0001e49u07ci5f8p","_id":"clo48ug7z0000hg9u29324vzk"},{"name":"Android","_id":"clo9qpzk700018c9u18ouf3uj"},{"name":"控件","parent":"clo9qpzk700018c9u18ouf3uj","_id":"clo9qpzk900028c9u0ih62bxl"},{"name":"recyclerView","parent":"clo9qpzk900028c9u0ih62bxl","_id":"clo9qpzk900038c9u865y0n63"},{"name":"Java","_id":"clrfrqh380001isvra9lw3nsn"}],"Data":[],"Page":[{"title":"categories","date":"2023-10-14T08:48:55.000Z","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2023-10-14 16:48:55\n---\n","updated":"2023-10-14T08:48:55.403Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"clo47hsze0000h49uhn853cuh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","type":"categories","_content":"","source":"categories/index.md","raw":"title: 分类\ntype: \"categories\"\n---\n","date":"2023-10-14T08:59:56.808Z","updated":"2023-10-14T08:59:56.808Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clo47hszj0002h49ub0zq5x0h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","layout":"page","_content":"\n","source":"about/index.md","raw":"title: \"About\"\nlayout: \"page\"\n---\n\n","date":"2023-10-14T08:22:21.790Z","updated":"2023-10-14T08:22:21.790Z","path":"about/index.html","comments":1,"_id":"clo47hszl0004h49u0xqwd78x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2023-10-14T08:22:21.804Z","updated":"2023-10-14T08:22:21.804Z","path":"tags/index.html","comments":1,"_id":"clo47hszm0006h49u7ed14lm6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java线程池","toc":true,"date":"2024-01-16T02:52:06.000Z","_content":"\n## 一、为什么要使用线程池？\n\nnew Thread(Runnable task).start();的方式创建线程执行任务存在弊端：线程不能复用；而重复创建和销毁线程耗时耗资源；\n\n**线程池的优势：**\n\n* 降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的销毁 (线程池里没有销毁的线程处于什么状态，不会占用资源吗？为什么不会占用？)\n* 提高响应速度：当有任务时，任务可以不需要等到线程创建就能立即执行（暂不理解）\n* 提高线程的可管理性：线程池可以进行统一的分配，调优和监控（如何管理？）\n\n## 二、什么是线程池？\n\n线程池(ThreadPool)是一种基于池化思想管理线程的工具。当没有线程池时，我们会创建一个线程，将任务传递给线程，并且一个线程只能执行一个任务，如果还有任务，就只能再创建一个线程去执行它，当任务执行完时，线程就销毁了，重复创建和销毁线程是一件很耗时耗资源的事，如果能重复利用，就可以减少不必要的消耗，于是线程池就应运而生了。\n\n事先将线程创建好，当有任务需要执行时，提交给线程池，线程池分配线程去执行，有再多的任务也不怕，线程池中的线程能复用，执行完一个任务，再接着执行其他任务，当所有任务都执行完时，我们可以选择关闭线程池，也可以选择等待接收任务。 \n\n## 三、怎么用线程池？\n\n在JAVA中主要是使用ThreadPoolExecutor类来创建线程池，并且JDK中也提供了Executors工厂类来创建线程池（不推荐使用）。创建线程的方式一共有8种，都是基于原生创建线程池的方式。\n\n### 3.1 为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？\n\n《阿里巴巴Java开发手册》的第7章第4小节中写到：\n\n线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\n\n说明：Executors 返回的线程池对象的弊端如下：\n\n1. **FixedThreadPool 和 SingleThreadPool:**\n\n允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。\n\n2. **CachedThreadPool:**\n\n允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。\n\n### 3.2 如何使用原生方式创建线程池？\n\nJava中线程池的核心实现类是ThreadPoolExecutor，可以通过该类地构造方法来构造一个线程池\n\n#### 3.2.1 ThreadPoolExecutor的构造组成\n\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) \n```\n\n**corePoolSize：**核心线程数\n\n只要线程池不关闭，核心线程就不会被销毁\n\n**maximumPoolSize：**最大线程数\n\n表示线程池中最多允许存在的线程数量，在线程池中，除去核心线程之外的线程是非核心线程，非核心线程如果没有执行任务的话会被清理，在被清理之前能够存活多久取决于后面两个参数。\n\n**keepAliveTime：**空闲线程存活时间\n\n**unit：**时间单位\n\n**workQueue：**任务队列，存放已提交任务的队列\n\n* ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列（数组结构可配合指针实现一个环形队列）。\n\n* LinkedBlockingQueue： 一个由链表结构组成的有界阻塞队列，在未指明容量时，容量默认为 Integer.MAX_VALUE。\n\n* PriorityBlockingQueue： 一个支持优先级排序的无界阻塞队列，对元素没有要求，可以实现 Comparable 接口也可以提供 Comparator 来对队列中的元素进行比较。跟时间没有任何关系，仅仅是按照优先级取任务。\n\n* DelayQueue：类似于PriorityBlockingQueue，是二叉堆实现的无界优先级阻塞队列。要求元素都实现 Delayed 接口，通过执行时延从队列中提取任务，时间没到任务取不出来。\n\n* SynchronousQueue： 一个不存储元素的阻塞队列，消费者线程调用 take() 方法的时候就会发生阻塞，直到有一个生产者线程生产了一个元素，消费者线程就可以拿到这个元素并返回；生产者线程调用 put() 方法的时候也会发生阻塞，直到有一个消费者线程消费了一个元素，生产者才会返回。\n\n* LinkedBlockingDeque： 使用双向队列实现的有界双端阻塞队列。双端意味着可以像普通队列一样 FIFO（先进先出），也可以像栈一样 FILO（先进后出）。\n\n* LinkedTransferQueue： 它是ConcurrentLinkedQueue、LinkedBlockingQueue 和 SynchronousQueue 的结合体，但是把它用在 ThreadPoolExecutor 中，和 LinkedBlockingQueue 行为一致，但是是无界的阻塞队列。\n\n注意有界队列和无界队列的区别：如果使用有界队列，当队列饱和时并超过最大线程数时就会执行拒绝策略；而如果使用无界队列，因为任务队列永远都可以添加任务，所以设置 maximumPoolSize 没有任何意义。\n\n**threadFactory：**线程工厂\n\n线程工厂指定创建线程的方式，需要实现 ThreadFactory 接口，并实现 newThread(Runnable r) 方法。\n\n```java\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class MyThreadFactory implements ThreadFactory {\n\n    private final String name;\n    private final AtomicInteger i = new AtomicInteger(1);\n\n    public MyThreadFactory(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public Thread newThread(Runnable task) {\n        Thread thread = new Thread(task);\n        thread.setName(name + i.getAndIncrement());\n        return thread;\n    }\n}\n```\n\n\n\n**handler：**任务拒绝策略\n\n当线程池的线程数达到最大线程数时，需要执行拒绝策略。拒绝策略需要实现 RejectedExecutionHandler 接口，并实现 rejectedExecution(Runnable r, ThreadPoolExecutor executor) 方法。不过 Executors 框架已经为我们实现了 4 种拒绝策略：\n\n* AbortPolicy（默认）：丢弃任务并抛出 RejectedExecutionException 异常。\n\n* CallerRunsPolicy：由调用线程处理该任务。\n\n* DiscardPolicy：丢弃任务，但是不抛出异常。可以配合这种模式进行自定义的处理方式。\n\n* DiscardOldestPolicy：丢弃处于任务队列头部的任务，添加被拒绝的任务\n\n#### 3.2.2 实践，创建一个线程池\n\n```java\npublic class Task implements Runnable{\n\n    private final String taskName;\n\n    public Task(String taskName) {\n        this.taskName = taskName;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"线程名：\"+ Thread.currentThread().getName()+ \";\" + taskName + \" 已完成\");\n    }\n}\n```\n\n```java\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class MyThreadFactory implements ThreadFactory {\n\n    private final String name;\n    private final AtomicInteger i = new AtomicInteger(1);\n\n    public MyThreadFactory(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public Thread newThread(Runnable task) {\n        Thread thread = new Thread(task);\n        thread.setName(name + i.getAndIncrement());\n        return thread;\n    }\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Task task1 = new Task(\"任务一\");\n        Task task2 = new Task(\"任务二\");\n        Task task3 = new Task(\"任务三\");\n\n        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(10, 25, 10L,\n                TimeUnit.SECONDS,\n                new LinkedBlockingQueue<>(),\n                new MyThreadFactory(\"自定义线程\"),\n                new ThreadPoolExecutor.AbortPolicy());\n\n        threadPool.execute(task1);\n        threadPool.execute(task2);\n        threadPool.execute(task3);\n\n        threadPool.shutdown();\n    }\n}\n```\n\n**输出结果：**  \n\n线程名：自定义线程3;任务三 已完成\n线程名：自定义线程1;任务一 已完成\n线程名：自定义线程2;任务二 已完成\n\n### 3.3提交任务的方式\n\n1. execute：\n\n用于向线程池提交Runnable任务，无返回值\n\n1. submit：\n\n用于向线程池提交Callable和Runnable任务，有返回值。\n\nsubmit有以下三种方法：\n\n| 方法名              | 返回值类型 | 描述                           |\n| ------------------- | ---------- | ------------------------------ |\n| submit(Runnable)    | Future<?>  | 提交Runnable任务               |\n| submit(Runnable)    | Future<T>  | 提交Runnable任务并指定执行结果 |\n| submit(Callable<T>) | Future<T>  | 提交Callable任务               |\n\n### 3.4 shutdown与shutdownNow\n\n* shutdown\n\n  1. 不再接收新的任务\n\n   shutdown方法一旦调用，线程池就会被关闭，假如池中还有任务正在执行，不会中断，假如此时提交新的任务，线程池不会接受并会根据设置的拒绝策略拒绝它。\n\n  **程序演示**\n\n  ```java\n  public class Main {\n      public static void main(String[] args) {\n  \n  \n          ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.SECONDS,\n                  new LinkedBlockingQueue<>(1),\n                  new ThreadPoolExecutor.AbortPolicy());\n  \n          poolExecutor.execute(new Task(\"1\"));\n  \n          poolExecutor.shutdown();\n  \n          poolExecutor.execute(new Task(\"2\"));\n  \n      }\n  }\n  \n  ```\n\n  **运行结果**\n\n  Exception in thread \"main\" java.util.concurrent.RejectedExecutionException: Task Task@2812cbfa rejected from java.util.concurrent.ThreadPoolExecutor@2acf57e3[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2055)\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:825)\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1355)\n  \tat Main.main(Main.java:34)\n  线程名：pool-1-thread-1;1 已完成\n\n  \n\n  2. 继续执行完任务队列中的任务\n\n  调用shutdown后，假如线程池队列中还有任务没有执行，线程池会继续执行完它，直到线程池队列中所有的任务都执行完，线程池才会彻底得关闭。\n\n  **程序演示**\n\n  ```java\n  public class Main {\n      public static void main(String[] args) {\n  \n  \n          ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.SECONDS,\n                  new LinkedBlockingQueue<>(3),\n                  new ThreadPoolExecutor.AbortPolicy());\n  \n          poolExecutor.execute(new Task(\"1\"));\n          poolExecutor.execute(new Task(\"3\"));\n          poolExecutor.execute(new Task(\"4\"));\n          poolExecutor.shutdown();\n  \n          poolExecutor.execute(new Task(\"2\"));\n  \n      }\n  }\n  ```\n\n  **运行结果**\n\n  Exception in thread \"main\" java.util.concurrent.RejectedExecutionException: Task Task@2812cbfa rejected from java.util.concurrent.ThreadPoolExecutor@2acf57e3[Shutting down, pool size = 1, active threads = 0, queued tasks = 2, completed tasks = 0]\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2055)\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:825)\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1355)\n  \tat Main.main(Main.java:35)\n  线程名：pool-1-thread-1;1 已完成\n  线程名：pool-1-thread-1;3 已完成\n  线程名：pool-1-thread-1;4 已完成\n\n  Process finished with exit code 1\n\n  \n\n* shutdownNow\n\n\n\n\n\n## 参考资料\n> - 【看动画，学Java线程池教程】 https://www.bilibili.com/video/BV1wh411e7nd/?share_source=copy_web&vd_source=657251adc83ac8ca83b61a76eec4be46\n","source":"_posts/java-threadpool.md","raw":"---\ntitle: Java线程池\ntoc: true\ndate: 2024-01-16 10:52:06\ntags:\ncategories: Java\n---\n\n## 一、为什么要使用线程池？\n\nnew Thread(Runnable task).start();的方式创建线程执行任务存在弊端：线程不能复用；而重复创建和销毁线程耗时耗资源；\n\n**线程池的优势：**\n\n* 降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的销毁 (线程池里没有销毁的线程处于什么状态，不会占用资源吗？为什么不会占用？)\n* 提高响应速度：当有任务时，任务可以不需要等到线程创建就能立即执行（暂不理解）\n* 提高线程的可管理性：线程池可以进行统一的分配，调优和监控（如何管理？）\n\n## 二、什么是线程池？\n\n线程池(ThreadPool)是一种基于池化思想管理线程的工具。当没有线程池时，我们会创建一个线程，将任务传递给线程，并且一个线程只能执行一个任务，如果还有任务，就只能再创建一个线程去执行它，当任务执行完时，线程就销毁了，重复创建和销毁线程是一件很耗时耗资源的事，如果能重复利用，就可以减少不必要的消耗，于是线程池就应运而生了。\n\n事先将线程创建好，当有任务需要执行时，提交给线程池，线程池分配线程去执行，有再多的任务也不怕，线程池中的线程能复用，执行完一个任务，再接着执行其他任务，当所有任务都执行完时，我们可以选择关闭线程池，也可以选择等待接收任务。 \n\n## 三、怎么用线程池？\n\n在JAVA中主要是使用ThreadPoolExecutor类来创建线程池，并且JDK中也提供了Executors工厂类来创建线程池（不推荐使用）。创建线程的方式一共有8种，都是基于原生创建线程池的方式。\n\n### 3.1 为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？\n\n《阿里巴巴Java开发手册》的第7章第4小节中写到：\n\n线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\n\n说明：Executors 返回的线程池对象的弊端如下：\n\n1. **FixedThreadPool 和 SingleThreadPool:**\n\n允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。\n\n2. **CachedThreadPool:**\n\n允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。\n\n### 3.2 如何使用原生方式创建线程池？\n\nJava中线程池的核心实现类是ThreadPoolExecutor，可以通过该类地构造方法来构造一个线程池\n\n#### 3.2.1 ThreadPoolExecutor的构造组成\n\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) \n```\n\n**corePoolSize：**核心线程数\n\n只要线程池不关闭，核心线程就不会被销毁\n\n**maximumPoolSize：**最大线程数\n\n表示线程池中最多允许存在的线程数量，在线程池中，除去核心线程之外的线程是非核心线程，非核心线程如果没有执行任务的话会被清理，在被清理之前能够存活多久取决于后面两个参数。\n\n**keepAliveTime：**空闲线程存活时间\n\n**unit：**时间单位\n\n**workQueue：**任务队列，存放已提交任务的队列\n\n* ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列（数组结构可配合指针实现一个环形队列）。\n\n* LinkedBlockingQueue： 一个由链表结构组成的有界阻塞队列，在未指明容量时，容量默认为 Integer.MAX_VALUE。\n\n* PriorityBlockingQueue： 一个支持优先级排序的无界阻塞队列，对元素没有要求，可以实现 Comparable 接口也可以提供 Comparator 来对队列中的元素进行比较。跟时间没有任何关系，仅仅是按照优先级取任务。\n\n* DelayQueue：类似于PriorityBlockingQueue，是二叉堆实现的无界优先级阻塞队列。要求元素都实现 Delayed 接口，通过执行时延从队列中提取任务，时间没到任务取不出来。\n\n* SynchronousQueue： 一个不存储元素的阻塞队列，消费者线程调用 take() 方法的时候就会发生阻塞，直到有一个生产者线程生产了一个元素，消费者线程就可以拿到这个元素并返回；生产者线程调用 put() 方法的时候也会发生阻塞，直到有一个消费者线程消费了一个元素，生产者才会返回。\n\n* LinkedBlockingDeque： 使用双向队列实现的有界双端阻塞队列。双端意味着可以像普通队列一样 FIFO（先进先出），也可以像栈一样 FILO（先进后出）。\n\n* LinkedTransferQueue： 它是ConcurrentLinkedQueue、LinkedBlockingQueue 和 SynchronousQueue 的结合体，但是把它用在 ThreadPoolExecutor 中，和 LinkedBlockingQueue 行为一致，但是是无界的阻塞队列。\n\n注意有界队列和无界队列的区别：如果使用有界队列，当队列饱和时并超过最大线程数时就会执行拒绝策略；而如果使用无界队列，因为任务队列永远都可以添加任务，所以设置 maximumPoolSize 没有任何意义。\n\n**threadFactory：**线程工厂\n\n线程工厂指定创建线程的方式，需要实现 ThreadFactory 接口，并实现 newThread(Runnable r) 方法。\n\n```java\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class MyThreadFactory implements ThreadFactory {\n\n    private final String name;\n    private final AtomicInteger i = new AtomicInteger(1);\n\n    public MyThreadFactory(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public Thread newThread(Runnable task) {\n        Thread thread = new Thread(task);\n        thread.setName(name + i.getAndIncrement());\n        return thread;\n    }\n}\n```\n\n\n\n**handler：**任务拒绝策略\n\n当线程池的线程数达到最大线程数时，需要执行拒绝策略。拒绝策略需要实现 RejectedExecutionHandler 接口，并实现 rejectedExecution(Runnable r, ThreadPoolExecutor executor) 方法。不过 Executors 框架已经为我们实现了 4 种拒绝策略：\n\n* AbortPolicy（默认）：丢弃任务并抛出 RejectedExecutionException 异常。\n\n* CallerRunsPolicy：由调用线程处理该任务。\n\n* DiscardPolicy：丢弃任务，但是不抛出异常。可以配合这种模式进行自定义的处理方式。\n\n* DiscardOldestPolicy：丢弃处于任务队列头部的任务，添加被拒绝的任务\n\n#### 3.2.2 实践，创建一个线程池\n\n```java\npublic class Task implements Runnable{\n\n    private final String taskName;\n\n    public Task(String taskName) {\n        this.taskName = taskName;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"线程名：\"+ Thread.currentThread().getName()+ \";\" + taskName + \" 已完成\");\n    }\n}\n```\n\n```java\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class MyThreadFactory implements ThreadFactory {\n\n    private final String name;\n    private final AtomicInteger i = new AtomicInteger(1);\n\n    public MyThreadFactory(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public Thread newThread(Runnable task) {\n        Thread thread = new Thread(task);\n        thread.setName(name + i.getAndIncrement());\n        return thread;\n    }\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Task task1 = new Task(\"任务一\");\n        Task task2 = new Task(\"任务二\");\n        Task task3 = new Task(\"任务三\");\n\n        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(10, 25, 10L,\n                TimeUnit.SECONDS,\n                new LinkedBlockingQueue<>(),\n                new MyThreadFactory(\"自定义线程\"),\n                new ThreadPoolExecutor.AbortPolicy());\n\n        threadPool.execute(task1);\n        threadPool.execute(task2);\n        threadPool.execute(task3);\n\n        threadPool.shutdown();\n    }\n}\n```\n\n**输出结果：**  \n\n线程名：自定义线程3;任务三 已完成\n线程名：自定义线程1;任务一 已完成\n线程名：自定义线程2;任务二 已完成\n\n### 3.3提交任务的方式\n\n1. execute：\n\n用于向线程池提交Runnable任务，无返回值\n\n1. submit：\n\n用于向线程池提交Callable和Runnable任务，有返回值。\n\nsubmit有以下三种方法：\n\n| 方法名              | 返回值类型 | 描述                           |\n| ------------------- | ---------- | ------------------------------ |\n| submit(Runnable)    | Future<?>  | 提交Runnable任务               |\n| submit(Runnable)    | Future<T>  | 提交Runnable任务并指定执行结果 |\n| submit(Callable<T>) | Future<T>  | 提交Callable任务               |\n\n### 3.4 shutdown与shutdownNow\n\n* shutdown\n\n  1. 不再接收新的任务\n\n   shutdown方法一旦调用，线程池就会被关闭，假如池中还有任务正在执行，不会中断，假如此时提交新的任务，线程池不会接受并会根据设置的拒绝策略拒绝它。\n\n  **程序演示**\n\n  ```java\n  public class Main {\n      public static void main(String[] args) {\n  \n  \n          ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.SECONDS,\n                  new LinkedBlockingQueue<>(1),\n                  new ThreadPoolExecutor.AbortPolicy());\n  \n          poolExecutor.execute(new Task(\"1\"));\n  \n          poolExecutor.shutdown();\n  \n          poolExecutor.execute(new Task(\"2\"));\n  \n      }\n  }\n  \n  ```\n\n  **运行结果**\n\n  Exception in thread \"main\" java.util.concurrent.RejectedExecutionException: Task Task@2812cbfa rejected from java.util.concurrent.ThreadPoolExecutor@2acf57e3[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2055)\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:825)\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1355)\n  \tat Main.main(Main.java:34)\n  线程名：pool-1-thread-1;1 已完成\n\n  \n\n  2. 继续执行完任务队列中的任务\n\n  调用shutdown后，假如线程池队列中还有任务没有执行，线程池会继续执行完它，直到线程池队列中所有的任务都执行完，线程池才会彻底得关闭。\n\n  **程序演示**\n\n  ```java\n  public class Main {\n      public static void main(String[] args) {\n  \n  \n          ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.SECONDS,\n                  new LinkedBlockingQueue<>(3),\n                  new ThreadPoolExecutor.AbortPolicy());\n  \n          poolExecutor.execute(new Task(\"1\"));\n          poolExecutor.execute(new Task(\"3\"));\n          poolExecutor.execute(new Task(\"4\"));\n          poolExecutor.shutdown();\n  \n          poolExecutor.execute(new Task(\"2\"));\n  \n      }\n  }\n  ```\n\n  **运行结果**\n\n  Exception in thread \"main\" java.util.concurrent.RejectedExecutionException: Task Task@2812cbfa rejected from java.util.concurrent.ThreadPoolExecutor@2acf57e3[Shutting down, pool size = 1, active threads = 0, queued tasks = 2, completed tasks = 0]\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2055)\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:825)\n  \tat java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1355)\n  \tat Main.main(Main.java:35)\n  线程名：pool-1-thread-1;1 已完成\n  线程名：pool-1-thread-1;3 已完成\n  线程名：pool-1-thread-1;4 已完成\n\n  Process finished with exit code 1\n\n  \n\n* shutdownNow\n\n\n\n\n\n## 参考资料\n> - 【看动画，学Java线程池教程】 https://www.bilibili.com/video/BV1wh411e7nd/?share_source=copy_web&vd_source=657251adc83ac8ca83b61a76eec4be46\n","slug":"java-threadpool","published":1,"updated":"2024-01-16T05:52:59.128Z","_id":"clrfrqh330000isvrf7qd6l0f","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、为什么要使用线程池？\"><a href=\"#一、为什么要使用线程池？\" class=\"headerlink\" title=\"一、为什么要使用线程池？\"></a>一、为什么要使用线程池？</h2><p>new Thread(Runnable task).start();的方式创建线程执行任务存在弊端：线程不能复用；而重复创建和销毁线程耗时耗资源；</p>\n<p><strong>线程池的优势：</strong></p>\n<ul>\n<li>降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的销毁 (线程池里没有销毁的线程处于什么状态，不会占用资源吗？为什么不会占用？)</li>\n<li>提高响应速度：当有任务时，任务可以不需要等到线程创建就能立即执行（暂不理解）</li>\n<li>提高线程的可管理性：线程池可以进行统一的分配，调优和监控（如何管理？）</li>\n</ul>\n<h2 id=\"二、什么是线程池？\"><a href=\"#二、什么是线程池？\" class=\"headerlink\" title=\"二、什么是线程池？\"></a>二、什么是线程池？</h2><p>线程池(ThreadPool)是一种基于池化思想管理线程的工具。当没有线程池时，我们会创建一个线程，将任务传递给线程，并且一个线程只能执行一个任务，如果还有任务，就只能再创建一个线程去执行它，当任务执行完时，线程就销毁了，重复创建和销毁线程是一件很耗时耗资源的事，如果能重复利用，就可以减少不必要的消耗，于是线程池就应运而生了。</p>\n<p>事先将线程创建好，当有任务需要执行时，提交给线程池，线程池分配线程去执行，有再多的任务也不怕，线程池中的线程能复用，执行完一个任务，再接着执行其他任务，当所有任务都执行完时，我们可以选择关闭线程池，也可以选择等待接收任务。 </p>\n<h2 id=\"三、怎么用线程池？\"><a href=\"#三、怎么用线程池？\" class=\"headerlink\" title=\"三、怎么用线程池？\"></a>三、怎么用线程池？</h2><p>在JAVA中主要是使用ThreadPoolExecutor类来创建线程池，并且JDK中也提供了Executors工厂类来创建线程池（不推荐使用）。创建线程的方式一共有8种，都是基于原生创建线程池的方式。</p>\n<h3 id=\"3-1-为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？\"><a href=\"#3-1-为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？\" class=\"headerlink\" title=\"3.1 为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？\"></a>3.1 为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？</h3><p>《阿里巴巴Java开发手册》的第7章第4小节中写到：</p>\n<p>线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>\n<p>说明：Executors 返回的线程池对象的弊端如下：</p>\n<ol>\n<li><strong>FixedThreadPool 和 SingleThreadPool:</strong></li>\n</ol>\n<p>允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</p>\n<ol start=\"2\">\n<li><strong>CachedThreadPool:</strong></li>\n</ol>\n<p>允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p>\n<h3 id=\"3-2-如何使用原生方式创建线程池？\"><a href=\"#3-2-如何使用原生方式创建线程池？\" class=\"headerlink\" title=\"3.2 如何使用原生方式创建线程池？\"></a>3.2 如何使用原生方式创建线程池？</h3><p>Java中线程池的核心实现类是ThreadPoolExecutor，可以通过该类地构造方法来构造一个线程池</p>\n<h4 id=\"3-2-1-ThreadPoolExecutor的构造组成\"><a href=\"#3-2-1-ThreadPoolExecutor的构造组成\" class=\"headerlink\" title=\"3.2.1 ThreadPoolExecutor的构造组成\"></a>3.2.1 ThreadPoolExecutor的构造组成</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> </span><br></pre></td></tr></table></figure>\n\n<p><strong>corePoolSize：</strong>核心线程数</p>\n<p>只要线程池不关闭，核心线程就不会被销毁</p>\n<p><strong>maximumPoolSize：</strong>最大线程数</p>\n<p>表示线程池中最多允许存在的线程数量，在线程池中，除去核心线程之外的线程是非核心线程，非核心线程如果没有执行任务的话会被清理，在被清理之前能够存活多久取决于后面两个参数。</p>\n<p><strong>keepAliveTime：</strong>空闲线程存活时间</p>\n<p><strong>unit：</strong>时间单位</p>\n<p><strong>workQueue：</strong>任务队列，存放已提交任务的队列</p>\n<ul>\n<li><p>ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列（数组结构可配合指针实现一个环形队列）。</p>\n</li>\n<li><p>LinkedBlockingQueue： 一个由链表结构组成的有界阻塞队列，在未指明容量时，容量默认为 Integer.MAX_VALUE。</p>\n</li>\n<li><p>PriorityBlockingQueue： 一个支持优先级排序的无界阻塞队列，对元素没有要求，可以实现 Comparable 接口也可以提供 Comparator 来对队列中的元素进行比较。跟时间没有任何关系，仅仅是按照优先级取任务。</p>\n</li>\n<li><p>DelayQueue：类似于PriorityBlockingQueue，是二叉堆实现的无界优先级阻塞队列。要求元素都实现 Delayed 接口，通过执行时延从队列中提取任务，时间没到任务取不出来。</p>\n</li>\n<li><p>SynchronousQueue： 一个不存储元素的阻塞队列，消费者线程调用 take() 方法的时候就会发生阻塞，直到有一个生产者线程生产了一个元素，消费者线程就可以拿到这个元素并返回；生产者线程调用 put() 方法的时候也会发生阻塞，直到有一个消费者线程消费了一个元素，生产者才会返回。</p>\n</li>\n<li><p>LinkedBlockingDeque： 使用双向队列实现的有界双端阻塞队列。双端意味着可以像普通队列一样 FIFO（先进先出），也可以像栈一样 FILO（先进后出）。</p>\n</li>\n<li><p>LinkedTransferQueue： 它是ConcurrentLinkedQueue、LinkedBlockingQueue 和 SynchronousQueue 的结合体，但是把它用在 ThreadPoolExecutor 中，和 LinkedBlockingQueue 行为一致，但是是无界的阻塞队列。</p>\n</li>\n</ul>\n<p>注意有界队列和无界队列的区别：如果使用有界队列，当队列饱和时并超过最大线程数时就会执行拒绝策略；而如果使用无界队列，因为任务队列永远都可以添加任务，所以设置 maximumPoolSize 没有任何意义。</p>\n<p><strong>threadFactory：</strong>线程工厂</p>\n<p>线程工厂指定创建线程的方式，需要实现 ThreadFactory 接口，并实现 newThread(Runnable r) 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThreadFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyThreadFactory</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable task)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task);</span><br><span class=\"line\">        thread.setName(name + i.getAndIncrement());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>handler：</strong>任务拒绝策略</p>\n<p>当线程池的线程数达到最大线程数时，需要执行拒绝策略。拒绝策略需要实现 RejectedExecutionHandler 接口，并实现 rejectedExecution(Runnable r, ThreadPoolExecutor executor) 方法。不过 Executors 框架已经为我们实现了 4 种拒绝策略：</p>\n<ul>\n<li><p>AbortPolicy（默认）：丢弃任务并抛出 RejectedExecutionException 异常。</p>\n</li>\n<li><p>CallerRunsPolicy：由调用线程处理该任务。</p>\n</li>\n<li><p>DiscardPolicy：丢弃任务，但是不抛出异常。可以配合这种模式进行自定义的处理方式。</p>\n</li>\n<li><p>DiscardOldestPolicy：丢弃处于任务队列头部的任务，添加被拒绝的任务</p>\n</li>\n</ul>\n<h4 id=\"3-2-2-实践，创建一个线程池\"><a href=\"#3-2-2-实践，创建一个线程池\" class=\"headerlink\" title=\"3.2.2 实践，创建一个线程池\"></a>3.2.2 实践，创建一个线程池</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Task</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String taskName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Task</span><span class=\"params\">(String taskName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.taskName = taskName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程名：&quot;</span>+ Thread.currentThread().getName()+ <span class=\"string\">&quot;;&quot;</span> + taskName + <span class=\"string\">&quot; 已完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThreadFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyThreadFactory</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable task)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task);</span><br><span class=\"line\">        thread.setName(name + i.getAndIncrement());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;任务一&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;任务二&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;任务三&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">10</span>, <span class=\"number\">25</span>, <span class=\"number\">10L</span>,</span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">MyThreadFactory</span>(<span class=\"string\">&quot;自定义线程&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">        threadPool.execute(task1);</span><br><span class=\"line\">        threadPool.execute(task2);</span><br><span class=\"line\">        threadPool.execute(task3);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadPool.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果：</strong>  </p>\n<p>线程名：自定义线程3;任务三 已完成<br>线程名：自定义线程1;任务一 已完成<br>线程名：自定义线程2;任务二 已完成</p>\n<h3 id=\"3-3提交任务的方式\"><a href=\"#3-3提交任务的方式\" class=\"headerlink\" title=\"3.3提交任务的方式\"></a>3.3提交任务的方式</h3><ol>\n<li>execute：</li>\n</ol>\n<p>用于向线程池提交Runnable任务，无返回值</p>\n<ol>\n<li>submit：</li>\n</ol>\n<p>用于向线程池提交Callable和Runnable任务，有返回值。</p>\n<p>submit有以下三种方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>返回值类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>submit(Runnable)</td>\n<td>Future&lt;?&gt;</td>\n<td>提交Runnable任务</td>\n</tr>\n<tr>\n<td>submit(Runnable)</td>\n<td>Future<T></T></td>\n<td>提交Runnable任务并指定执行结果</td>\n</tr>\n<tr>\n<td>submit(Callable<T>)</T></td>\n<td>Future<T></T></td>\n<td>提交Callable任务</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-4-shutdown与shutdownNow\"><a href=\"#3-4-shutdown与shutdownNow\" class=\"headerlink\" title=\"3.4 shutdown与shutdownNow\"></a>3.4 shutdown与shutdownNow</h3><ul>\n<li><p>shutdown</p>\n<ol>\n<li>不再接收新的任务</li>\n</ol>\n<p> shutdown方法一旦调用，线程池就会被关闭，假如池中还有任务正在执行，不会中断，假如此时提交新的任务，线程池不会接受并会根据设置的拒绝策略拒绝它。</p>\n<p><strong>程序演示</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">poolExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(<span class=\"number\">1</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;2&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>运行结果</strong></p>\n<p>Exception in thread “main” java.util.concurrent.RejectedExecutionException: Task Task@2812cbfa rejected from java.util.concurrent.ThreadPoolExecutor@2acf57e3[Shutting down, pool size &#x3D; 1, active threads &#x3D; 1, queued tasks &#x3D; 0, completed tasks &#x3D; 0]<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2055)<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:825)<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1355)<br>    at Main.main(Main.java:34)<br>线程名：pool-1-thread-1;1 已完成</p>\n<ol start=\"2\">\n<li>继续执行完任务队列中的任务</li>\n</ol>\n<p>调用shutdown后，假如线程池队列中还有任务没有执行，线程池会继续执行完它，直到线程池队列中所有的任务都执行完，线程池才会彻底得关闭。</p>\n<p><strong>程序演示</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">poolExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(<span class=\"number\">3</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;3&quot;</span>));</span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;4&quot;</span>));</span><br><span class=\"line\">        poolExecutor.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;2&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行结果</strong></p>\n<p>Exception in thread “main” java.util.concurrent.RejectedExecutionException: Task Task@2812cbfa rejected from java.util.concurrent.ThreadPoolExecutor@2acf57e3[Shutting down, pool size &#x3D; 1, active threads &#x3D; 0, queued tasks &#x3D; 2, completed tasks &#x3D; 0]<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2055)<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:825)<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1355)<br>    at Main.main(Main.java:35)<br>线程名：pool-1-thread-1;1 已完成<br>线程名：pool-1-thread-1;3 已完成<br>线程名：pool-1-thread-1;4 已完成</p>\n<p>Process finished with exit code 1</p>\n</li>\n<li><p>shutdownNow</p>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li>【看动画，学Java线程池教程】 <a href=\"https://www.bilibili.com/video/BV1wh411e7nd/?share_source=copy_web&vd_source=657251adc83ac8ca83b61a76eec4be46\">https://www.bilibili.com/video/BV1wh411e7nd/?share_source=copy_web&amp;vd_source=657251adc83ac8ca83b61a76eec4be46</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":7045,"excerpt":"","more":"<h2 id=\"一、为什么要使用线程池？\"><a href=\"#一、为什么要使用线程池？\" class=\"headerlink\" title=\"一、为什么要使用线程池？\"></a>一、为什么要使用线程池？</h2><p>new Thread(Runnable task).start();的方式创建线程执行任务存在弊端：线程不能复用；而重复创建和销毁线程耗时耗资源；</p>\n<p><strong>线程池的优势：</strong></p>\n<ul>\n<li>降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的销毁 (线程池里没有销毁的线程处于什么状态，不会占用资源吗？为什么不会占用？)</li>\n<li>提高响应速度：当有任务时，任务可以不需要等到线程创建就能立即执行（暂不理解）</li>\n<li>提高线程的可管理性：线程池可以进行统一的分配，调优和监控（如何管理？）</li>\n</ul>\n<h2 id=\"二、什么是线程池？\"><a href=\"#二、什么是线程池？\" class=\"headerlink\" title=\"二、什么是线程池？\"></a>二、什么是线程池？</h2><p>线程池(ThreadPool)是一种基于池化思想管理线程的工具。当没有线程池时，我们会创建一个线程，将任务传递给线程，并且一个线程只能执行一个任务，如果还有任务，就只能再创建一个线程去执行它，当任务执行完时，线程就销毁了，重复创建和销毁线程是一件很耗时耗资源的事，如果能重复利用，就可以减少不必要的消耗，于是线程池就应运而生了。</p>\n<p>事先将线程创建好，当有任务需要执行时，提交给线程池，线程池分配线程去执行，有再多的任务也不怕，线程池中的线程能复用，执行完一个任务，再接着执行其他任务，当所有任务都执行完时，我们可以选择关闭线程池，也可以选择等待接收任务。 </p>\n<h2 id=\"三、怎么用线程池？\"><a href=\"#三、怎么用线程池？\" class=\"headerlink\" title=\"三、怎么用线程池？\"></a>三、怎么用线程池？</h2><p>在JAVA中主要是使用ThreadPoolExecutor类来创建线程池，并且JDK中也提供了Executors工厂类来创建线程池（不推荐使用）。创建线程的方式一共有8种，都是基于原生创建线程池的方式。</p>\n<h3 id=\"3-1-为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？\"><a href=\"#3-1-为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？\" class=\"headerlink\" title=\"3.1 为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？\"></a>3.1 为什么不推荐用Executors工厂类来创建线程池，推荐原生方式？</h3><p>《阿里巴巴Java开发手册》的第7章第4小节中写到：</p>\n<p>线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>\n<p>说明：Executors 返回的线程池对象的弊端如下：</p>\n<ol>\n<li><strong>FixedThreadPool 和 SingleThreadPool:</strong></li>\n</ol>\n<p>允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</p>\n<ol start=\"2\">\n<li><strong>CachedThreadPool:</strong></li>\n</ol>\n<p>允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p>\n<h3 id=\"3-2-如何使用原生方式创建线程池？\"><a href=\"#3-2-如何使用原生方式创建线程池？\" class=\"headerlink\" title=\"3.2 如何使用原生方式创建线程池？\"></a>3.2 如何使用原生方式创建线程池？</h3><p>Java中线程池的核心实现类是ThreadPoolExecutor，可以通过该类地构造方法来构造一个线程池</p>\n<h4 id=\"3-2-1-ThreadPoolExecutor的构造组成\"><a href=\"#3-2-1-ThreadPoolExecutor的构造组成\" class=\"headerlink\" title=\"3.2.1 ThreadPoolExecutor的构造组成\"></a>3.2.1 ThreadPoolExecutor的构造组成</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> </span><br></pre></td></tr></table></figure>\n\n<p><strong>corePoolSize：</strong>核心线程数</p>\n<p>只要线程池不关闭，核心线程就不会被销毁</p>\n<p><strong>maximumPoolSize：</strong>最大线程数</p>\n<p>表示线程池中最多允许存在的线程数量，在线程池中，除去核心线程之外的线程是非核心线程，非核心线程如果没有执行任务的话会被清理，在被清理之前能够存活多久取决于后面两个参数。</p>\n<p><strong>keepAliveTime：</strong>空闲线程存活时间</p>\n<p><strong>unit：</strong>时间单位</p>\n<p><strong>workQueue：</strong>任务队列，存放已提交任务的队列</p>\n<ul>\n<li><p>ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列（数组结构可配合指针实现一个环形队列）。</p>\n</li>\n<li><p>LinkedBlockingQueue： 一个由链表结构组成的有界阻塞队列，在未指明容量时，容量默认为 Integer.MAX_VALUE。</p>\n</li>\n<li><p>PriorityBlockingQueue： 一个支持优先级排序的无界阻塞队列，对元素没有要求，可以实现 Comparable 接口也可以提供 Comparator 来对队列中的元素进行比较。跟时间没有任何关系，仅仅是按照优先级取任务。</p>\n</li>\n<li><p>DelayQueue：类似于PriorityBlockingQueue，是二叉堆实现的无界优先级阻塞队列。要求元素都实现 Delayed 接口，通过执行时延从队列中提取任务，时间没到任务取不出来。</p>\n</li>\n<li><p>SynchronousQueue： 一个不存储元素的阻塞队列，消费者线程调用 take() 方法的时候就会发生阻塞，直到有一个生产者线程生产了一个元素，消费者线程就可以拿到这个元素并返回；生产者线程调用 put() 方法的时候也会发生阻塞，直到有一个消费者线程消费了一个元素，生产者才会返回。</p>\n</li>\n<li><p>LinkedBlockingDeque： 使用双向队列实现的有界双端阻塞队列。双端意味着可以像普通队列一样 FIFO（先进先出），也可以像栈一样 FILO（先进后出）。</p>\n</li>\n<li><p>LinkedTransferQueue： 它是ConcurrentLinkedQueue、LinkedBlockingQueue 和 SynchronousQueue 的结合体，但是把它用在 ThreadPoolExecutor 中，和 LinkedBlockingQueue 行为一致，但是是无界的阻塞队列。</p>\n</li>\n</ul>\n<p>注意有界队列和无界队列的区别：如果使用有界队列，当队列饱和时并超过最大线程数时就会执行拒绝策略；而如果使用无界队列，因为任务队列永远都可以添加任务，所以设置 maximumPoolSize 没有任何意义。</p>\n<p><strong>threadFactory：</strong>线程工厂</p>\n<p>线程工厂指定创建线程的方式，需要实现 ThreadFactory 接口，并实现 newThread(Runnable r) 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThreadFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyThreadFactory</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable task)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task);</span><br><span class=\"line\">        thread.setName(name + i.getAndIncrement());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>handler：</strong>任务拒绝策略</p>\n<p>当线程池的线程数达到最大线程数时，需要执行拒绝策略。拒绝策略需要实现 RejectedExecutionHandler 接口，并实现 rejectedExecution(Runnable r, ThreadPoolExecutor executor) 方法。不过 Executors 框架已经为我们实现了 4 种拒绝策略：</p>\n<ul>\n<li><p>AbortPolicy（默认）：丢弃任务并抛出 RejectedExecutionException 异常。</p>\n</li>\n<li><p>CallerRunsPolicy：由调用线程处理该任务。</p>\n</li>\n<li><p>DiscardPolicy：丢弃任务，但是不抛出异常。可以配合这种模式进行自定义的处理方式。</p>\n</li>\n<li><p>DiscardOldestPolicy：丢弃处于任务队列头部的任务，添加被拒绝的任务</p>\n</li>\n</ul>\n<h4 id=\"3-2-2-实践，创建一个线程池\"><a href=\"#3-2-2-实践，创建一个线程池\" class=\"headerlink\" title=\"3.2.2 实践，创建一个线程池\"></a>3.2.2 实践，创建一个线程池</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Task</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String taskName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Task</span><span class=\"params\">(String taskName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.taskName = taskName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程名：&quot;</span>+ Thread.currentThread().getName()+ <span class=\"string\">&quot;;&quot;</span> + taskName + <span class=\"string\">&quot; 已完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThreadFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyThreadFactory</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable task)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task);</span><br><span class=\"line\">        thread.setName(name + i.getAndIncrement());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;任务一&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;任务二&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Task</span> <span class=\"variable\">task3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;任务三&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">10</span>, <span class=\"number\">25</span>, <span class=\"number\">10L</span>,</span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">MyThreadFactory</span>(<span class=\"string\">&quot;自定义线程&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">        threadPool.execute(task1);</span><br><span class=\"line\">        threadPool.execute(task2);</span><br><span class=\"line\">        threadPool.execute(task3);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadPool.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果：</strong>  </p>\n<p>线程名：自定义线程3;任务三 已完成<br>线程名：自定义线程1;任务一 已完成<br>线程名：自定义线程2;任务二 已完成</p>\n<h3 id=\"3-3提交任务的方式\"><a href=\"#3-3提交任务的方式\" class=\"headerlink\" title=\"3.3提交任务的方式\"></a>3.3提交任务的方式</h3><ol>\n<li>execute：</li>\n</ol>\n<p>用于向线程池提交Runnable任务，无返回值</p>\n<ol>\n<li>submit：</li>\n</ol>\n<p>用于向线程池提交Callable和Runnable任务，有返回值。</p>\n<p>submit有以下三种方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>返回值类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>submit(Runnable)</td>\n<td>Future&lt;?&gt;</td>\n<td>提交Runnable任务</td>\n</tr>\n<tr>\n<td>submit(Runnable)</td>\n<td>Future<T></T></td>\n<td>提交Runnable任务并指定执行结果</td>\n</tr>\n<tr>\n<td>submit(Callable<T>)</T></td>\n<td>Future<T></T></td>\n<td>提交Callable任务</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-4-shutdown与shutdownNow\"><a href=\"#3-4-shutdown与shutdownNow\" class=\"headerlink\" title=\"3.4 shutdown与shutdownNow\"></a>3.4 shutdown与shutdownNow</h3><ul>\n<li><p>shutdown</p>\n<ol>\n<li>不再接收新的任务</li>\n</ol>\n<p> shutdown方法一旦调用，线程池就会被关闭，假如池中还有任务正在执行，不会中断，假如此时提交新的任务，线程池不会接受并会根据设置的拒绝策略拒绝它。</p>\n<p><strong>程序演示</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">poolExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(<span class=\"number\">1</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;2&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>运行结果</strong></p>\n<p>Exception in thread “main” java.util.concurrent.RejectedExecutionException: Task Task@2812cbfa rejected from java.util.concurrent.ThreadPoolExecutor@2acf57e3[Shutting down, pool size &#x3D; 1, active threads &#x3D; 1, queued tasks &#x3D; 0, completed tasks &#x3D; 0]<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2055)<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:825)<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1355)<br>    at Main.main(Main.java:34)<br>线程名：pool-1-thread-1;1 已完成</p>\n<ol start=\"2\">\n<li>继续执行完任务队列中的任务</li>\n</ol>\n<p>调用shutdown后，假如线程池队列中还有任务没有执行，线程池会继续执行完它，直到线程池队列中所有的任务都执行完，线程池才会彻底得关闭。</p>\n<p><strong>程序演示</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">poolExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(<span class=\"number\">3</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;3&quot;</span>));</span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;4&quot;</span>));</span><br><span class=\"line\">        poolExecutor.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">        poolExecutor.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;2&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行结果</strong></p>\n<p>Exception in thread “main” java.util.concurrent.RejectedExecutionException: Task Task@2812cbfa rejected from java.util.concurrent.ThreadPoolExecutor@2acf57e3[Shutting down, pool size &#x3D; 1, active threads &#x3D; 0, queued tasks &#x3D; 2, completed tasks &#x3D; 0]<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2055)<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:825)<br>    at java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1355)<br>    at Main.main(Main.java:35)<br>线程名：pool-1-thread-1;1 已完成<br>线程名：pool-1-thread-1;3 已完成<br>线程名：pool-1-thread-1;4 已完成</p>\n<p>Process finished with exit code 1</p>\n</li>\n<li><p>shutdownNow</p>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<ul>\n<li>【看动画，学Java线程池教程】 <a href=\"https://www.bilibili.com/video/BV1wh411e7nd/?share_source=copy_web&vd_source=657251adc83ac8ca83b61a76eec4be46\">https://www.bilibili.com/video/BV1wh411e7nd/?share_source=copy_web&amp;vd_source=657251adc83ac8ca83b61a76eec4be46</a></li>\n</ul>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clrfrqh330000isvrf7qd6l0f","category_id":"clrfrqh380001isvra9lw3nsn","_id":"clrfrqh3a0002isvrephce9i5"}],"PostTag":[],"Tag":[]}}